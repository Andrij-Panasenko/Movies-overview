{"version":3,"file":"static/js/871.e00727ca.chunk.js","mappings":"oMAEaA,EAAY,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAAA,MAAAC,SACGJ,EAAOK,KAAI,SAAAC,GAA6B,IAA1BC,EAAED,EAAFC,GAAIC,EAAcF,EAAdE,eACjB,OACEL,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaJ,GAAMK,MAAO,CAAEC,KAAMZ,GAAWG,SAClDI,KAFID,EAMb,KAGN,C,uJChBaO,EAAY,WACvB,IAAAC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAWpC,OACEd,EAAAA,EAAAA,KAAAkB,EAAAA,SAAA,CAAAjB,UACEkB,EAAAA,EAAAA,MAAA,QAAMC,SAXY,SAAAC,GACpBA,EAAIC,iBAEJ,IAAMC,EAAcF,EAAIG,cAAcC,MAAMC,MAE5CV,EAAaW,IAAI,QAASJ,EAAYK,cAAcC,QACpDZ,EAAgBD,EAClB,EAIkCf,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAAA,SACE8B,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,YAAY,qBAIhBjC,EAAAA,EAAAA,KAAA,UAAQ8B,KAAK,SAAQ7B,SAAC,eAI9B,E,kBCtBe,SAASiC,IAAc,IAADC,EACnCC,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAvB,EAAAA,EAAAA,GAAAqB,EAAA,GAAjCvC,EAAMyC,EAAA,GAAEC,EAASD,EAAA,GACxBE,GAAkCH,EAAAA,EAAAA,WAAS,GAAMI,GAAA1B,EAAAA,EAAAA,GAAAyB,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9B7B,GAAuBC,EAAAA,EAAAA,MACjBY,EAAiC,QAA5BU,GAD6BpB,EAAAA,EAAAA,GAAAH,EAAA,GAArB,GACQgC,IAAI,gBAAQ,IAAAT,EAAAA,EAAI,GAoB3C,OAlBAU,EAAAA,EAAAA,YAAU,WAIsB,SAAAC,IAU7B,OAV6BA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA9B,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACqB,OAAnBV,GAAa,GAAMQ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEWC,EAAAA,EAAAA,IAAe7B,GAAO,KAAD,EAA3CyB,EAAaC,EAAAI,KACnBhB,EAAUW,GAAeC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEzBM,EAAAA,GAAAA,MAAY,oDAAoD,QAE5C,OAF4CN,EAAAC,KAAA,GAEhET,GAAa,GAAOQ,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAV,EAAA,yBAEvBW,MAAA,KAAAC,UAAA,CAba,KAAVpC,GAEH,WAC6BqB,EAAAc,MAAC,KAADC,UAAA,CAW9BC,EACF,GAAG,CAACrC,KAGFN,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAjB,SAAA,EACED,EAAAA,EAAAA,KAACW,EAAS,IACT+B,IAAa1C,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,IACpBlE,EAAOmE,OAAS,IAAKhE,EAAAA,EAAAA,KAACL,EAAAA,EAAS,CAACE,OAAQA,MAG/C,C","sources":["components/MovieList/FilmList.js","components/SearchForm/SearchBar.js","pages/MoviesPage/MoviesPage.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, original_title }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {original_title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nexport const SearchBar = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchHandler = evt => {\n    evt.preventDefault();\n\n    const searchQuery = evt.currentTarget.query.value;\n\n    searchParams.set('query', searchQuery.toLowerCase().trim());\n    setSearchParams(searchParams);\n  };\n\n  return (\n    <>\n      <form onSubmit={searchHandler}>\n        <label>\n          <input\n            type=\"text\"\n            name=\"query\"\n            autoComplete=\"off\"\n            placeholder=\"Search movies\"\n          />\n        </label>\n\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\n","import { getMovieByName } from 'api/api';\nimport { MovieList } from 'components/MovieList/FilmList';\nimport { Loader } from 'components/Loader/Loader';\nimport { SearchBar } from 'components/SearchForm/SearchBar';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useSearchParams } from 'react-router-dom';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    async function getMovieByQuery() {\n      setIsLoading(true);\n      try {\n        const fetchedMovies = await getMovieByName(query);\n        setMovies(fetchedMovies);\n      } catch (error) {\n        toast.error('Ooops! Something went wrong. Try reloading page!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovieByQuery();\n  }, [query]);\n\n  return (\n    <>\n      <SearchBar />\n      {isLoading && <Loader />}\n      {movies.length > 0 && <MovieList movies={movies} />}\n    </>\n  );\n}\n"],"names":["MovieList","_ref","movies","location","useLocation","_jsx","children","map","_ref2","id","original_title","Link","to","concat","state","from","SearchBar","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_Fragment","_jsxs","onSubmit","evt","preventDefault","searchQuery","currentTarget","query","value","set","toLowerCase","trim","type","name","autoComplete","placeholder","MoviesPage","_searchParams$get","_useState","useState","_useState2","setMovies","_useState3","_useState4","isLoading","setIsLoading","get","useEffect","_getMovieByQuery","_asyncToGenerator","_regeneratorRuntime","_callee","fetchedMovies","_context","prev","next","getMovieByName","sent","t0","toast","finish","stop","apply","arguments","getMovieByQuery","Loader","length"],"sourceRoot":""}