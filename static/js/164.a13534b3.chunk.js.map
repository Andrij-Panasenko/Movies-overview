{"version":3,"file":"static/js/164.a13534b3.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/MovieDetails/MovieDetails.js","pages/MoviesDetailsPage/MovieDetailsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport { Spinner } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <Spinner>\n      <InfinitySpin color=\"#f0b629\" />\n    </Spinner>\n  );\n};\n","import { BASE_POSTER_URL } from 'constants/constants';\n\nexport const MovieDetails = ({ movie }) => {\n  return (\n    <>\n      {movie && (\n        <div>\n          <img\n            src={`${BASE_POSTER_URL + movie.poster_path}`}\n            alt={movie.original_title}\n          />\n          <div>\n            <h1>{movie.original_title}</h1>\n            <p>User score: {movie.vote_average}</p>\n            <h2>Overview</h2>\n            <p>{movie.overview}</p>\n            <h2>Genres</h2>\n            <ul>\n              {movie.genres &&\n                movie.genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n            </ul>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import {\n  Link,\n  NavLink,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\nimport { getMovieById } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\nimport toast from 'react-hot-toast';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\n\nexport default function MovieDetailsPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState(null);\n\n  const location = useLocation();\n  const backLinckRef = useRef(location);\n  const param = useParams();\n\n  const backLink = backLinckRef.current.state?.from ?? '/';\n\n  useEffect(() => {\n    async function fetchMovie() {\n      setIsLoading(true);\n      try {\n        const fetchedMovie = await getMovieById(param.movieId);\n        setMovie(fetchedMovie);\n      } catch (error) {\n        toast.error('Ooops! Something went wrong. Try reloading page!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, [param.movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <Link to={backLink}>\n        <b>Go Back</b>\n      </Link>\n\n      <MovieDetails movie={movie} />\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <NavLink to=\"cast\">Cast</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\">Reviews</NavLink>\n          </li>\n        </ul>\n      </div>\n      <Outlet />\n    </>\n  );\n}\n"],"names":["Spinner","styled","_templateObject","_taggedTemplateLiteral","Loader","_jsx","children","InfinitySpin","color","MovieDetails","_ref","movie","_Fragment","_jsxs","src","concat","BASE_POSTER_URL","poster_path","alt","original_title","vote_average","overview","genres","map","genre","name","id","MovieDetailsPage","_backLinckRef$current","_backLinckRef$current2","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","setMovie","location","useLocation","backLinckRef","useRef","param","useParams","backLink","current","state","from","useEffect","_fetchMovie","_asyncToGenerator","_regeneratorRuntime","_callee","fetchedMovie","_context","prev","next","getMovieById","movieId","sent","t0","toast","finish","stop","apply","arguments","fetchMovie","Link","to","NavLink","Outlet"],"sourceRoot":""}